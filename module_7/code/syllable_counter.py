"""
Syllable Counter Utility - Module 7
-----------------------------------
Utilities for counting syllables in English text and enforcing the haiku structure (5-7-5 syllables).
"""

import re
import nltk
from nltk.corpus import cmudict
from typing import List, Tuple, Optional, Dict, Union

# Download the CMU Pronunciation Dictionary if not already downloaded
try:
    nltk.data.find("corpora/cmudict")
except LookupError:
    nltk.download("cmudict")

# Load the CMU Pronunciation Dictionary
pronounce_dict = cmudict.dict()


def count_syllables_in_word(word: str) -> int:
    """
    Count the number of syllables in a single word using the CMU Pronunciation Dictionary.

    Args:
        word: The word to count syllables for

    Returns:
        Number of syllables in the word
    """
    # Convert word to lowercase and strip punctuation
    word = re.sub(r"[^\w\s]", "", word.lower())

    # Check if the word is in the pronunciation dictionary
    if word in pronounce_dict:
        # Count the number of syllables (vowel sounds) in the first pronunciation
        return len([ph for ph in pronounce_dict[word][0] if ph[-1].isdigit()])

    # If the word is not in the dictionary, use a fallback method
    return _count_syllables_fallback(word)


def _count_syllables_fallback(word: str) -> int:
    """
    Fallback method to count syllables when word is not in the pronunciation dictionary.

    Args:
        word: The word to count syllables for

    Returns:
        Estimated number of syllables
    """
    # Special case for empty strings
    if not word:
        return 0

    # Count vowel groups as syllables
    vowels = "aeiouy"
    word = word.lower()
    count = 0
    prev_is_vowel = False

    # Handle some common suffixes
    if word.endswith("es") and len(word) > 2:
        if word[-3] not in vowels:
            word = word[:-2]
    elif word.endswith("ed") and len(word) > 2:
        if word[-3] not in vowels:
            word = word[:-2]

    # Count vowel groups
    for char in word:
        is_vowel = char in vowels
        if is_vowel and not prev_is_vowel:
            count += 1
        prev_is_vowel = is_vowel

    # Handle special cases
    if word.endswith("e"):
        count -= 1
    if word.endswith("le") and len(word) > 2 and word[-3] not in vowels:
        count += 1
    if count == 0:
        count = 1  # Every word has at least one syllable

    return count


def count_syllables_in_text(text: str) -> int:
    """
    Count the total number of syllables in a text.

    Args:
        text: The text to count syllables for

    Returns:
        Total number of syllables
    """
    words = text.split()
    return sum(count_syllables_in_word(word) for word in words)


def is_valid_haiku(haiku_lines: List[str]) -> bool:
    """
    Check if a list of lines forms a valid haiku with the 5-7-5 syllable structure.

    Args:
        haiku_lines: List of strings, each representing a line of the haiku

    Returns:
        True if the haiku has the correct syllable structure, False otherwise
    """
    # A haiku should have exactly 3 lines
    if len(haiku_lines) != 3:
        return False

    # Count syllables in each line
    syllable_counts = [count_syllables_in_text(line) for line in haiku_lines]

    # Check if the syllable counts match the 5-7-5 pattern
    return (
        syllable_counts[0] == 5 and syllable_counts[1] == 7 and syllable_counts[2] == 5
    )


def format_as_haiku(text: str) -> List[str]:
    """
    Attempt to format a generated text as a haiku with the correct syllable structure.

    Args:
        text: Raw text that should be formatted as a haiku

    Returns:
        List of strings representing the lines of the haiku
    """
    # Remove extra whitespace and split into words
    words = text.split()

    # Initialize haiku lines
    haiku = ["", "", ""]
    line_idx = 0
    line_syllables = 0
    target_syllables = [5, 7, 5]

    # Process each word
    for word in words:
        word_syllables = count_syllables_in_word(word)

        # If adding this word would exceed the target for the current line
        if line_syllables + word_syllables > target_syllables[line_idx]:
            # Move to the next line if possible
            line_idx += 1
            if line_idx >= len(haiku):
                break  # We've filled all three lines
            line_syllables = 0

        # Add the word to the current line
        if haiku[line_idx]:
            haiku[line_idx] += " "
        haiku[line_idx] += word
        line_syllables += word_syllables

    return haiku


def enforce_syllable_constraints(generated_text: str) -> str:
    """
    Process generated text to enforce the haiku syllable constraints.

    Args:
        generated_text: Text generated by the model

    Returns:
        A properly formatted haiku with the correct syllable structure
    """
    # First attempt: try to format the raw text as a haiku
    haiku_lines = format_as_haiku(generated_text)

    # Check if the result is a valid haiku
    if is_valid_haiku(haiku_lines):
        return "\n".join(haiku_lines)

    # If not, apply more aggressive processing
    # ... (more advanced techniques could be implemented here)

    # For now, just return a best-effort result
    return "\n".join(haiku_lines)


def get_syllable_info(text: str) -> Dict[str, Union[int, List[int]]]:
    """
    Get detailed syllable information about a text, useful for debugging.

    Args:
        text: The text to analyze

    Returns:
        Dictionary with syllable counts and other information
    """
    lines = text.strip().split("\n")
    words = text.split()

    word_syllables = [(word, count_syllables_in_word(word)) for word in words]
    line_syllables = [count_syllables_in_text(line) for line in lines]

    return {
        "total_syllables": sum(s for _, s in word_syllables),
        "word_syllables": word_syllables,
        "line_syllables": line_syllables,
        "is_valid_haiku": len(lines) == 3 and line_syllables == [5, 7, 5],
    }


# Example usage
if __name__ == "__main__":
    # Test with some example haiku
    example_haiku = [
        "An old silent pond",
        "A frog jumps into the pond",
        "Splash! Silence again.",
    ]

    print("Example haiku:")
    for line in example_haiku:
        print(f"  {line}")

    # Check syllable counts
    syllable_counts = [count_syllables_in_text(line) for line in example_haiku]
    print("\nSyllable counts:")
    for i, count in enumerate(syllable_counts):
        print(f"  Line {i+1}: {count} syllables")

    # Check if it's a valid haiku
    valid = is_valid_haiku(example_haiku)
    print(f"\nIs this a valid haiku? {valid}")

    # Test with some generated text
    generated_text = (
        "autumn leaves falling to the ground in the cool breeze whispers of winter"
    )
    print("\nGenerated text:")
    print(f"  {generated_text}")

    # Format as haiku
    formatted_haiku = format_as_haiku(generated_text)
    print("\nFormatted as haiku:")
    for line in formatted_haiku:
        print(f"  {line}")

    # Check syllable counts of formatted haiku
    syllable_counts = [count_syllables_in_text(line) for line in formatted_haiku]
    print("\nSyllable counts after formatting:")
    for i, count in enumerate(syllable_counts):
        print(f"  Line {i+1}: {count} syllables")

    # Check if formatted text is a valid haiku
    valid = is_valid_haiku(formatted_haiku)
    print(f"\nIs the formatted text a valid haiku? {valid}")

    # Print haiku for the project
    print("\nHaiku about the project:")
    print("  Neural nets evolve")
    print("  From single node to language")
    print("  Code learns poetry")
